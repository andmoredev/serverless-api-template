openapi: 3.0.0
info:
  version: 1.0.0
  title: Task Service
  description: Manage your tasks like a boss.
  contact:
    name: Andres Moreno
    email: andres@andmore.dev

tags:
  - name: Tasks
    description: Task to be done

servers:
  - url: replace with real url
    description: some base url

security:
  - jwt: []

x-amazon-apigateway-request-validators:
  Validate body, query string parameters, and headers:
    validateRequestParameters: true
    validateRequestBody: true

x-amazon-apigateway-gateway-responses:
  BAD_REQUEST_BODY:
    statusCode: '400'
    responseTemplates:
      application/json: '{ "message": "$context.error.validationErrorString" }'
  UNAUTHORIZED:
    statusCode: '401'
    responseTemplates:
      application/json: '{ "message": "Unauthorized" }'
  ACCESS_DENIED:
    statusCode: '401'
    responseTemplates:
      application/json: '{ "message": "Unauthorized" }'

paths:
  /tasks:
    post:
      summary: Create Task
      description: |
        Create a task to be done. Tasks can have a type to allow for better categorization
        Optionally a due date can be provided.
      operationId: createTask
      tags:
        - Tasks
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - type
              properties:
                name:
                  type: string
                type:
                  type: string
                  enum:
                    - Work
                    - Personal
                dueDate:
                  type: string
                  format: date-time
      responses:
        '201':
          description: 'Task was created'
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    type: string
        '400':
          description: Invalid data provided
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
      x-amazon-apigateway-request-validator: Validate body, query string parameters, and headers
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        responses:
          '200':
            statusCode: '201'
            responseTemplates:
              application/json: |
                {
                  "id": "mockId"
                }
          default:
            statusCode: '500'
            responseTemplates:
              application/json: |
                {
                  "message": "Unhandled Error."
                }

components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT